recon_task:
  description: >
    You are a reconnaissance expert analyzing the website {{inputs.target_website}} for potential SQL injection vulnerabilities. Your goal is to understand the website's structure and identify potential entry points.

    **Your very first action MUST be to use the Selenium scraping tool with the command 'navigate to {{inputs.target_website}}'. Do this and report that the navigation is complete before moving to any other steps.**

    Once you have successfully navigated the website using Selenium, then proceed to:
    1.  Map the website's structure, including pages, directories, and subdomains. Use Selenium to interact with the site and find links.
    2.  Identify technologies used (e.g., server software, programming languages, database systems) by examining the rendered content and potentially the page source.
    3.  Find all HTML forms, input fields (text, search, etc.), and URL parameters that might accept user-supplied data. Use Selenium to find these elements in the rendered DOM.
    4.  Document the purpose of each identified input field or parameter, if possible.

    Focus on areas that could potentially interact with a database.
  expected_output: >
    A detailed report containing:
    -   Confirmation that Selenium navigation to {{inputs.target_website}} was successful.
    -   A site map or overview of the website's structure (obtained through Selenium).
    -   A list of identified technologies (gleaned from the rendered content).
    -   A comprehensive list of all input fields and URL parameters (found using Selenium), including:
        -   The page/URL where they are located.
        -   The name/ID of the input field or parameter.
        -   A brief description of its intended use.
        -   Whether it appears to interact with a database.
  agent: recon_agent

scan_task:
  description: >
    You are a vulnerability scanner.  You've received a report from the reconnaissance agent detailing potential entry points on the website {{inputs.target_website}}. Your task is to analyze these inputs for their susceptibility to SQL injection.
    For each input identified, perform the following:
    1.  Categorize the input type (e.g., text field, dropdown, URL parameter).
    2.  Consider the context of the input (e.g., is it used for login, search, filtering).
    3.  Based on the input type and context, assess the likelihood of it being vulnerable to SQL injection.
    4.  Prioritize inputs that are most likely to be vulnerable for further testing.
    Do not attempt to exploit, only analyze.
  expected_output: >
    A prioritized list of potentially vulnerable inputs, including:
    -   The page/URL where the input is located.
    -   The name/ID of the input field or parameter.
    -   The input type and its context.
    -   A vulnerability likelihood rating (e.g., High, Medium, Low).
    -   A brief justification for the vulnerability rating.
  agent: scanner_agent

payload_task:
  description: >
    You are a payload generator. You have a prioritized list of potentially vulnerable inputs on the website {{inputs.target_website}}, provided by the vulnerability scanner. Your task is to create SQL injection payloads to test these inputs.
    For each high and medium priority input:
    1.  Generate a variety of SQL injection payloads designed to:
        -   Extract data from the database.
        -   Bypass authentication.
        -   Modify database content.
        -   Determine the database type and version.
    2.  Include payloads that are specific to different database systems (e.g., MySQL, PostgreSQL, SQL Server).
    3.  Document the purpose of each payload and the expected behavior.
    4.  Consider different encoding methods if needed.
  expected_output: >
    A set of SQL injection test cases, organized by potentially vulnerable input.  Each test case should include:
    -   The target page/URL and input field/parameter.
    -   The SQL injection payload.
    -   The intended purpose of the payload.
    -   The expected behavior or outcome.
    -   The target database system (if applicable).